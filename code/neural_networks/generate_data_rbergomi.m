%% Initialize Script
clear;
serverRun = false;
project_folder = fileparts(fileparts(fileparts(matlab.desktop.editor.getActiveFilename)));
addpath(genpath(project_folder));
dataFolder = [project_folder,'\code\neural_networks\data'];

%% Define model
model = rBergomiClass('H',0.1,'rho',-0.5,'eta',2.1,'s0',100);
model.y = CurveClass('gridpoints',1,'values',0);
model.q = CurveClass('gridpoints',1,'values',0);
Txi = [(0.0025:0.0025:0.0175)';(0.02:0.02:0.14)';(0.16:0.12:1)';(1.25:0.25:2)';3];
model.xi = CurveClass('gridpoints',Txi,'values',ones(size(Txi)));

% Define pricer settings:
model.pricerSettings.n = [50000;25000;12500;6400;3200;500];
model.pricerSettings.tn = [0.004;0.008;0.016;0.032;0.2;Inf];
model.pricerSettings.N = 10^5;
model.pricerSettings.nRepeat = 1;
model.pricerSettings.precision = 'single';

%% Define inputs and outputs:
seed_train = 1235124;
seed_test = 5125122;

% Set the sampling settings for each parameter:
params = {'H','eta','rho','xi'};

[H_settings,eta_settings,rho_settings,xi_settings] = deal(struct);

H_settings.method = 'unif_discrete_random_grid';
H_settings.lb = 0.00;
H_settings.ub = 0.50;
H_settings.n = 50;
H_settings.resampleEvery = 5000;

eta_settings.method = 'unif_cont';
eta_settings.lb = 0.75;
eta_settings.ub = 3.5;

rho_settings.method = 'unif_cont';
rho_settings.lb = -1.00;
rho_settings.ub =  0.00;

% Settings for sampling forward variance curves:
xi_settings.method = 'xi_special';
xi_settings.Ts = Txi;
xi_settings.type = {'Heston';'Heston';'Heston';...
                    'Heston';'Heston';'Heston';...
                    'Heston';'Heston';'Heston';...
                    'Heston';'Heston';'Heston';... 
                    'piecewise_flat';'piecewise_flat';'piecewise_flat';
                    'flat';... 
                    'independent';... 
                    };
xi_settings.perc = [0.35*(4/10);0.35*(4/10);0.35*(2/10);...
                    0.05/3;0.05/3;0.05/3;...
                    0.05/3;0.05/3;0.05/3;...
                    0.25/3;0.25/3;0.25/3;...
                    0.15/3;0.15/3;0.15/3;...
                    0.05;
                    0.10...
                    ];
xi_settings.vol0_low = [0.05;0.05;0.05;...
                        0.05;0.05;0.05;...
                        0.30;0.30;0.30;...
                        0.05;0.05;0.05;...
                        0.05;0.05;0.05;...
                        0.05;...
                        0.05;...
                        ];
xi_settings.vol0_high = [1;1;1;...
                         0.30;0.30;0.30;...
                         1;1;1;...
                         0.30;0.30;0.30;...
                         1;1;1;...
                         0.30;...
                         1;...
                         ];
xi_settings.vs_rate_low = [0.05;0.05;0.05;...
                           0.30;0.30;0.30;...
                           0.05;0.05;0.05;...
                           0.05;0.05;0.05;...
                           0.05;0.05;0.05;...
                           0.05;...
                           0.05;...
                            ];
xi_settings.vs_rate_high = [1;1;1;...
                            1;1;1;...
                            0.3;0.3;0.3;...
                            0.30;0.30;0.30;...
                            1;1;1;...
                            0.30;...
                            1;...
                            ];
xi_settings.kappa_low = [0.01;0.01;0.01;...
                         20;20;20;...
                         20;20;20;...
                         0.01;0.01;0.01;...
                         NaN;NaN;NaN;...
                         NaN;...
                         NaN;...
                        ];
xi_settings.kappa_high = [20;20;20;...
                          100;100;100;...
                          100;100;100;...
                          20;20;20;...
                          NaN;NaN;NaN;...
                          NaN;...
                          NaN;...
                          ];
xi_settings.eps_noise = [0.025;0.05;0.2;...
                        0.025;0.05;0.2;...
                        0.025;0.05;0.2;...
                        0.025;0.05;0.2;...
                        0;0.025;0.05;...
                        0.025;...
                        0;...
                        ];
xi_settings.num_flat_sections = [NaN;NaN;NaN;...
                                 NaN;NaN;NaN;...
                                 NaN;NaN;NaN;...
                                 NaN;NaN;NaN;...
                                 3;3;3;...
                                 NaN;...
                                 NaN];
xi_settings.lb = 0.05.^2;
xi_settings.ub = 1;

samplingSettings = {H_settings,eta_settings,rho_settings,xi_settings};

% Choose the number of parallel workers:
nWorkers = 0;

% Load contracts:
k = importdata([dataFolder,'\logMoneyness.txt']);
T = importdata([dataFolder,'\expiries.txt']);

% Set folders to save temporary results:
saveFolderTrain = [dataFolder,'\temp\rbergomi_train_temp'];
saveFolderTest = [dataFolder,'\temp\rbergomi_test_temp'];
folderSlash = '\';

%% Collect sample data:
% Training data:
rng(seed_train);
[trainData,trainHeader,trainInputFail,trainErrFail] = ComputeTrainingData(...
                                         model,136000,params,...
                                         samplingSettings,k,T,...
                                        'use_sobol',true,...
                                        'tmpFolder',saveFolderTrain,...
                                        'saveEvery',40000,...
                                        'nWorkers',nWorkers,...
                                        'folderSlash',folderSlash,...
                                        'checkSmileConvexity',true,...
                                        'checkMertonsTunnel',true,...
                                        'getInputsOnly',false,...
                                        'reuse_numbers_for_each_H',true,...
                                        'seed',seed_train);

% Test data:
rng(seed_test);
[testData,testHeader,testInputFail,testErrFail] = ComputeTrainingData(...
                                         model,24000,params,...
                                         samplingSettings,k,T,...
                                        'use_sobol',false,...
                                        'tmpFolder',saveFolderTest,...
                                        'saveEvery',24000,...
                                        'nWorkers',nWorkers,...
                                        'folderSlash',folderSlash,...
                                        'checkSmileConvexity',true,...
                                        'checkMertonsTunnel',true,...
                                        'getInputsOnly',false,...
                                        'reuse_numbers_for_each_H',true,...
                                        'seed',seed_test);


%% Convert to implied volatility
% Training data:
[trainData_iv, idxNotValid] = ConvertTrainingDataToIV(trainData,trainHeader,...
                                                          model.s0,k,T,true);
if any(idxNotValid);error('Non-valid implied vol''s detected!');end
sum(idxNotValid)

%% Test data:
[testData_iv, idxNotValid] = ConvertTrainingDataToIV(testData,testHeader,...
                                                          model.s0,k,T,true);
if any(idxNotValid);error('Non-valid implied vol''s detected!');end
sum(idxNotValid)

%save([dataFolder,'\training_and_test_data\','rbergomi_trainData_iv.mat'],'trainData_iv','-v7.3')
%save([dataFolder,'\training_and_test_data\','rbergomi_testData_iv.mat'],'testData_iv','-v7.3')


%% Split each dataset into three separate ones depending on the expiries:
idxPar1 = (1:3+max(find(Txi < 0.008))+1)';
idxPar2 = (1:3+max(find(Txi < 0.03))+1)';
idxPar3 = (1:3+max(find(Txi < 0.12))+1)';
idxPar4 = (1:3+max(find(Txi < 0.40))+1)';
idxPar5 = (1:3+max(find(Txi < 1.00))+1)';
idxPar6 = (1:3+max(find(Txi < 3.00))+1)';

% Split dataset:
nParTotal = max(find(strcmpi(trainHeader','price_1'))) - 1;
nPricesTotal = max(find(strcmpi(trainHeader','se_1'))) - 1 - nParTotal;
idx1 = [idxPar1;nParTotal + find(T <= 0.008);nParTotal+nPricesTotal+find(T <= 0.008)];
idx2 = [idxPar2;nParTotal + find(T > 0.008 & T <= 0.03);nParTotal+nPricesTotal+find(T > 0.008 & T <= 0.03)];
idx3 = [idxPar3;nParTotal + find(T > 0.03 & T <= 0.12);nParTotal+nPricesTotal+find(T > 0.03 & T <= 0.12)];
idx4 = [idxPar4;nParTotal + find(T > 0.12 & T <= 0.40);nParTotal+nPricesTotal+find(T > 0.12 & T <= 0.40)];
idx5 = [idxPar5;nParTotal + find(T > 0.40 & T <= 1.00);nParTotal+nPricesTotal+find(T > 0.40 & T <= 1.00)];
idx6 = [idxPar6;nParTotal + find(T > 1.00);nParTotal+nPricesTotal+find(T > 1.00)];

trainData_iv_1 = trainData_iv(:,idx1);
trainData_iv_2 = trainData_iv(:,idx2);
trainData_iv_3 = trainData_iv(:,idx3);
trainData_iv_4 = trainData_iv(:,idx4);
trainData_iv_5 = trainData_iv(:,idx5);
trainData_iv_6 = trainData_iv(:,idx6);

header_1 = strrep(trainHeader(idx1),'price','iv');
header_2 = strrep(trainHeader(idx2),'price','iv');
header_3 = strrep(trainHeader(idx3),'price','iv');
header_4 = strrep(trainHeader(idx4),'price','iv');
header_5 = strrep(trainHeader(idx5),'price','iv');
header_6 = strrep(trainHeader(idx6),'price','iv');

% Convert to tables: 
trainData_iv_1_tbl = array2table(trainData_iv_1);
trainData_iv_2_tbl = array2table(trainData_iv_2);
trainData_iv_3_tbl = array2table(trainData_iv_3);
trainData_iv_4_tbl = array2table(trainData_iv_4);
trainData_iv_5_tbl = array2table(trainData_iv_5);
trainData_iv_6_tbl = array2table(trainData_iv_6);

trainData_iv_1_tbl.Properties.VariableNames = header_1;
trainData_iv_2_tbl.Properties.VariableNames = header_2;
trainData_iv_3_tbl.Properties.VariableNames = header_3;
trainData_iv_4_tbl.Properties.VariableNames = header_4;
trainData_iv_5_tbl.Properties.VariableNames = header_5;
trainData_iv_6_tbl.Properties.VariableNames = header_6;

clear trainData_iv_1 trainData_iv_2 trainData_iv_3 trainData_iv_4 trainData_iv_5 trainData_iv_6 ...
      trainData_iv  trainData

writetable(trainData_iv_1_tbl,[dataFolder,'\training_and_test_data\rbergomi\rbergomi_training_data_1.csv']);
writetable(trainData_iv_2_tbl,[dataFolder,'\training_and_test_data\rbergomi\rbergomi_training_data_2.csv']);
writetable(trainData_iv_3_tbl,[dataFolder,'\training_and_test_data\rbergomi\rbergomi_training_data_3.csv']);
writetable(trainData_iv_4_tbl,[dataFolder,'\training_and_test_data\rbergomi\rbergomi_training_data_4.csv']);
writetable(trainData_iv_5_tbl,[dataFolder,'\training_and_test_data\rbergomi\rbergomi_training_data_5.csv']);
writetable(trainData_iv_6_tbl,[dataFolder,'\training_and_test_data\rbergomi\rbergomi_training_data_6.csv']);

clear trainData_iv_1_tbl trainData_iv_2_tbl trainData_iv_3_tbl ...
      trainData_iv_4_tbl trainData_iv_5_tbl trainData_iv_6_tbl

testData_iv_1 = testData_iv(:,idx1);
testData_iv_2 = testData_iv(:,idx2);
testData_iv_3 = testData_iv(:,idx3);
testData_iv_4 = testData_iv(:,idx4);
testData_iv_5 = testData_iv(:,idx5);
testData_iv_6 = testData_iv(:,idx6);

% Convert to tables: 
testData_iv_1_tbl = array2table(testData_iv_1);
testData_iv_2_tbl = array2table(testData_iv_2);
testData_iv_3_tbl = array2table(testData_iv_3);
testData_iv_4_tbl = array2table(testData_iv_4);
testData_iv_5_tbl = array2table(testData_iv_5);
testData_iv_6_tbl = array2table(testData_iv_6);

testData_iv_1_tbl.Properties.VariableNames = header_1;
testData_iv_2_tbl.Properties.VariableNames = header_2;
testData_iv_3_tbl.Properties.VariableNames = header_3;
testData_iv_4_tbl.Properties.VariableNames = header_4;
testData_iv_5_tbl.Properties.VariableNames = header_5;
testData_iv_6_tbl.Properties.VariableNames = header_6;

clear testData_iv_1 testData_iv_2 testData_iv_3 ...
      testData_iv_4 testData_iv_5 testData_iv_6 testData_iv testData

writetable(testData_iv_1_tbl,[dataFolder,'\training_and_test_data\rbergomi\rbergomi_test_data_1.csv']);
writetable(testData_iv_2_tbl,[dataFolder,'\training_and_test_data\rbergomi\rbergomi_test_data_2.csv']);
writetable(testData_iv_3_tbl,[dataFolder,'\training_and_test_data\rbergomi\rbergomi_test_data_3.csv']);
writetable(testData_iv_4_tbl,[dataFolder,'\training_and_test_data\rbergomi\rbergomi_test_data_4.csv']);
writetable(testData_iv_5_tbl,[dataFolder,'\training_and_test_data\rbergomi\rbergomi_test_data_5.csv']);
writetable(testData_iv_6_tbl,[dataFolder,'\training_and_test_data\rbergomi\rbergomi_test_data_6.csv']);

